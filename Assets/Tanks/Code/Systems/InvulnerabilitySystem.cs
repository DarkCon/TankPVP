using System;
using Morpeh;
using Tanks.Utils;
using UnityEngine;
using Unity.IL2CPP.CompilerServices;

[Il2CppSetOption(Option.NullChecks, false)]
[Il2CppSetOption(Option.ArrayBoundsChecks, false)]
[Il2CppSetOption(Option.DivideByZeroChecks, false)]
[CreateAssetMenu(menuName = "ECS/Systems/" + nameof(InvulnerabilitySystem))]
public sealed class InvulnerabilitySystem : UpdateSystem {
    private Filter filterInvulnerability;
    private Filter filterEnableView;
    private Filter filterDisableView;
    
    public override void OnAwake() {
        this.filterInvulnerability = this.World.Filter.With<InvulnerabilityComponent>();

        this.filterEnableView = this.filterInvulnerability
            .Without<InvulnerabilityViewComponent>()
            .With<TransformComponent>();

        this.filterDisableView = this.World.Filter
            .With<InvulnerabilityViewComponent>()
            .Without<InvulnerabilityComponent>();
    }

    public override void OnUpdate(float deltaTime) {
        EnableView();
        UpdateInvulnerability(deltaTime);
        DisableView();
    }

    private void UpdateInvulnerability(float deltaTime) {
        var invulnerabilityBag = this.filterInvulnerability.Select<InvulnerabilityComponent>();
        for (int i = 0, length = this.filterInvulnerability.Length; i < length; ++i) {
            ref var invulnerabilityComponent = ref invulnerabilityBag.GetComponent(i);
            invulnerabilityComponent.time -= deltaTime;
            if (invulnerabilityComponent.time <= 0f) {
                var entity = this.filterInvulnerability.GetEntity(i);
                entity.RemoveComponent<InvulnerabilityComponent>();
            }
        }
    }

    private void EnableView() {
        var transformBag = this.filterEnableView.Select<TransformComponent>();
        for (int i = 0, length = this.filterEnableView.Length; i < length; ++i) {
            var entity = this.filterEnableView.GetEntity(i);
            ref var transformComponent = ref transformBag.GetComponent(i);

            var viewEntity = ObjectsPool.Main.Take("Invulnerability", Vector3.zero);
            viewEntity.GetComponent<GameObjectComponent>().obj.transform
                .SetParent(transformComponent.transform, false);
            
            entity.SetComponent(new InvulnerabilityViewComponent { view = viewEntity});
        }
    }

    private void DisableView() {
        var viewBag = this.filterDisableView.Select<InvulnerabilityViewComponent>();
        for (int i = 0, length = this.filterDisableView.Length; i < length; ++i) {
            ObjectsPool.Main.Return(viewBag.GetComponent(i).view, this.World);

            var entity = this.filterDisableView.GetEntity(i); 
            entity.RemoveComponent<InvulnerabilityViewComponent>();
        }
    }
}